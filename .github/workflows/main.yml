name: Build ROM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: تنظیم فضای Swap
        run: |
          set -e
          sudo swapoff -a || true
          sudo rm -f /swapfile || true
          if ! swapon -s | grep -q '/swapfile'; then
            sudo fallocate -l 8G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=8192
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            free -h
          fi

      - name: افزودن مخزن Universe
        run: |
          sudo add-apt-repository -y universe
          sudo apt update

      - name: پاکسازی و بروزرسانی APT
        run: |
          sudo apt clean
          sudo rm -rf /var/lib/apt/lists/*
          for i in {1..3}; do sudo apt update && break || sleep 10; done
          sudo apt upgrade -y || true

      - name: حل مشکلات dpkg
        run: |
          sudo dpkg --configure -a || true
          sudo apt install -f -y || true

      - name: نصب ابزارهای اصلی
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
              openjdk-17-jdk repo git-core gnupg flex bison gperf build-essential \
              zlib1g-dev libc6-dev libncurses5-dev x11proto-core-dev libx11-dev \
              libgl1-mesa-dev libxml2-utils xsltproc unzip python3 python3-pip \
              android-sdk-libsparse-utils wget ccache lz4

      - name: نصب mkbootimg
        run: |
          if ! sudo apt install -y android-tools-mkbootimg; then
            curl -LO https://github.com/chenxiaolong/android_device_xiaomi_msm8916-common/raw/master/tools/mkbootimg/mkbootimg
            chmod +x mkbootimg
            sudo mv mkbootimg /usr/local/bin/
          fi

      - name: نصب ابزارهای جانبی
        run: |
          sudo apt install -y f2fs-tools squashfs-tools

  build:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 480

    steps:
      - name: دانلود MIUI Fastboot
        run: |
          mkdir -p miui_rom
          cd miui_rom
          wget -O miui.tgz "لینک_دانلود_معتبر_فایل_MIUI_خود_را_اینجا_قرار_دهید" || exit 1
          tar -xvf miui.tgz --strip-components=1
          echo "فایل‌های استخراج شده:"
          ls -R

      - name: جستجوی فایل‌های حیاتی
        run: |
          cd miui_rom
          
          # جستجوی super.img
          SUPER_IMG=$(find . -name "super.img" -print -quit)
          [ -z "$SUPER_IMG" ] && echo "❌ super.img پیدا نشد!" && exit 1

          # جستجوی boot.img
          BOOT_IMG=$(find . -name "boot.img" -print -quit)
          [ -z "$BOOT_IMG" ] && echo "❌ boot.img پیدا نشد!" && exit 1

          # جستجوی vendor
          VENDOR_DIR=$(find . -type d -name "vendor" -print -quit)
          [ -z "$VENDOR_DIR" ] && echo "❌ پوشه vendor پیدا نشد!" && exit 1

          # جستجوی فایل‌های فریمور
          FIRMWARE_FILES=$(find . -type f \( -name "modem.img" -o -name "vendor.img" -o -name "firmware*" \))
          if [ -z "$FIRMWARE_FILES" ]; then
            echo "⚠️ هیچ فایل فریموری پیدا نشد! این مرحله نادیده گرفته می‌شود."
          else
            echo "✅ فایل‌های فریمور پیدا شدند:"
            echo "$FIRMWARE_FILES"
          fi

      - name: استخراج super.img
        run: |
          cd miui_rom
          simg2img super.img super.raw.img
          mkdir super_extracted
          7z x super.raw.img -osuper_extracted
          echo "محتوای super.img:"
          ls -R super_extracted

      - name: آماده‌سازی فایل‌های منبع
        run: |
          mkdir -p android_source/device/xiaomi/chopin
          cp -r miui_rom/super_extracted/system/etc/selinux android_source/device/xiaomi/chopin/
          cp miui_rom/boot.img android_source/device/xiaomi/chopin/
          cp -r miui_rom/vendor android_source/device/xiaomi/chopin/

      - name: دانلود سورس اندروید
        run: |
          cd android_source
          repo init -u https://github.com/PixelOS-AOSP/platform_manifest.git -b pixel-14.0
          repo sync -j$(nproc)

      - name: کامپایل ریکاوری
        run: |
          cd android_source
          source build/envsetup.sh
          lunch aosp_chopin-userdebug
          make recoveryimage -j$(nproc)

      - name: کامپایل ROM
        run: |
          cd android_source
          make -j$(nproc)

      - name: آپلود آرتیفکت
        uses: actions/upload-artifact@v3
        with:
          name: Custom-ROM
          path: |
            android_source/out/target/product/chopin/*.zip
            android_source/out/target/product/chopin/recovery.img
