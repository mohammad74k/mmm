name: Advanced ROM Builder

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CCACHE_DIR: /github/home/.ccache
  REPO_DIR: /github/home/repo
  TOOL_VERSIONS:
    MKBOOTIMG: "20231020"
    PAYLOAD_DUMPER: "1.2.3"
  LIB_VERSIONS:
    LIBLZMA: "5.2.5"
    ZLIB: "1.2.11"
    OPENSSL: "3.0.2"

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure System
        run: |
          sudo timedatectl set-timezone Asia/Tehran
          echo "fs.inotify.max_user_watches=524288" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ~/repo
          key: ${{ runner.os }}-${{ hashFiles('**/Makefile') }}-${{ github.run_number }}

      - name: Swap Management
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Install Essential Libraries
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            liblzma-dev="${{ env.LIB_VERSIONS.LIBLZMA }}*" \
            zlib1g-dev="${{ env.LIB_VERSIONS.ZLIB }}*" \
            libssl-dev="${{ env.LIB_VERSIONS.OPENSSL }}*" \
            libncurses5-dev \
            libxml2-dev \
            libc6-dev

          # Verify library versions
          for lib in liblzma zlib1g libssl3; do
            version=$(dpkg -s ${lib}-dev | grep Version | cut -d' ' -f2)
            echo "Installed ${lib}: $version"
          done

      - name: Install Custom Tools
        run: |
          mkdir -p ~/custom_tools
          echo "$HOME/custom_tools" >> $GITHUB_PATH

          # Install mkbootimg
          wget -q https://github.com/chenxiaolong/mkbootimg/releases/download/${{ env.TOOL_VERSIONS.MKBOOTIMG }}/mkbootimg \
            -O ~/custom_tools/mkbootimg
          echo "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08  ~/custom_tools/mkbootimg" | sha256sum -c
          chmod +x ~/custom_tools/mkbootimg

          # Install payload-dumper-go
          wget -q https://github.com/ssut/payload-dumper-go/releases/download/v${{ env.TOOL_VERSIONS.PAYLOAD_DUMPER }}/payload-dumper-go_linux_amd64 \
            -O ~/custom_tools/payload-dumper-go
          echo "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824  ~/custom_tools/payload-dumper-go" | sha256sum -c
          chmod +x ~/custom_tools/payload-dumper-go

  build:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 360

    steps:
      - name: Initialize Environment
        run: |
          ccache -M 50G
          ccache -s
          repo --version
          mkbootimg --version
          payload-dumper-go --version

      - name: Download Source Code
        run: |
          mkdir -p android_source
          cd android_source
          repo init -u https://github.com/PixelOS-AOSP/platform_manifest.git -b pixel-14.0
          repo sync -c -q -j$(nproc) --force-sync --no-clone-bundle

      - name: Build Preparation
        run: |
          cd android_source
          source build/envsetup.sh
          lunch aosp_chopin-userdebug

      - name: Compile ROM
        run: |
          cd android_source
          make -j$(nproc) 2>&1 | tee build.log
          
          # Generate flashable images
          mkdir -p artifacts
          cp $OUT/*.img artifacts/

      - name: Post-build Actions
        run: |
          ccache -s
          sudo swapoff -a
          sudo rm -f /swapfile
          df -h
          free -h

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rom-artifacts
          path: |
            android_source/build.log
            android_source/artifacts/*.img
          retention-days: 7

      - name: Send Notification
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const status = ${{ job.status }}
            const message = status === 'success' 
              ? '✅ ساخت ROM با موفقیت انجام شد!' 
              : '❌ خطا در فرآیند ساخت! کد خطا: ${{ github.run_id }}'
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })
